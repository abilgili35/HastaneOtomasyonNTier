// <auto-generated />
using System;
using DataAccess.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(HospitalAutomationContext))]
    partial class HospitalAutomationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Entities.AnalysisResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("AnalysisResults");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AnalysisDate = new DateTime(2024, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(6735),
                            FileLink = "Link1",
                            IsActive = true,
                            PatientId = 2
                        },
                        new
                        {
                            ID = 2,
                            AnalysisDate = new DateTime(2024, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(6773),
                            FileLink = "Link2",
                            IsActive = true,
                            PatientId = 1
                        },
                        new
                        {
                            ID = 3,
                            AnalysisDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(6777),
                            FileLink = "Link3",
                            IsActive = true,
                            PatientId = 3
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Appointment", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DoctorId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            PatientId = 2,
                            AppointmentDate = new DateTime(2024, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 762, DateTimeKind.Local).AddTicks(6688),
                            IsActive = true
                        },
                        new
                        {
                            DoctorId = 2,
                            PatientId = 1,
                            AppointmentDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 762, DateTimeKind.Local).AddTicks(6722),
                            IsActive = true
                        },
                        new
                        {
                            DoctorId = 3,
                            PatientId = 3,
                            AppointmentDate = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 762, DateTimeKind.Local).AddTicks(6726),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Doctor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DegreeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 750, DateTimeKind.Local).AddTicks(5644),
                            DegreeDate = new DateTime(1961, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ahmet",
                            IsActive = true,
                            LastName = "Yilmaz",
                            Profession = "Dahiliye"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 750, DateTimeKind.Local).AddTicks(5702),
                            DegreeDate = new DateTime(1967, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Enver",
                            IsActive = true,
                            LastName = "Akturk",
                            Profession = "Cerrahi"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 750, DateTimeKind.Local).AddTicks(5706),
                            DegreeDate = new DateTime(1981, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Rukiye",
                            IsActive = true,
                            LastName = "Bilgili",
                            Profession = "Kulak Burun Bogaz"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 750, DateTimeKind.Local).AddTicks(5710),
                            DegreeDate = new DateTime(1987, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ufuk",
                            IsActive = true,
                            LastName = "Gunalp",
                            Profession = "Goz"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdentityNumber")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 741, DateTimeKind.Local).AddTicks(8551),
                            FirstName = "Ali",
                            IdentityNumber = 333222111,
                            IsActive = true,
                            LastName = "Yilmaz"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 743, DateTimeKind.Local).AddTicks(6278),
                            FirstName = "Osman",
                            IdentityNumber = 55544433,
                            IsActive = true,
                            LastName = "Akturk"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 743, DateTimeKind.Local).AddTicks(6296),
                            FirstName = "Aziz",
                            IdentityNumber = 66677788,
                            IsActive = true,
                            LastName = "Bilgili"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 743, DateTimeKind.Local).AddTicks(6300),
                            FirstName = "Fatih",
                            IdentityNumber = 22255588,
                            IsActive = true,
                            LastName = "Gunalp"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.PatientInfo", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("PatientInfos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BirthDate = new DateTime(1961, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 749, DateTimeKind.Local).AddTicks(7182),
                            Email = "info@abc.com",
                            Height = 1.76,
                            IsActive = true,
                            PhoneNumber = "1112223344",
                            Weight = 80.5
                        },
                        new
                        {
                            ID = 2,
                            BirthDate = new DateTime(1981, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 749, DateTimeKind.Local).AddTicks(7218),
                            Email = "info@bcd.com",
                            Height = 1.8200000000000001,
                            IsActive = true,
                            PhoneNumber = "1112223344",
                            Weight = 71.5
                        },
                        new
                        {
                            ID = 3,
                            BirthDate = new DateTime(1995, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 749, DateTimeKind.Local).AddTicks(7222),
                            Email = "info@cde.com",
                            Height = 1.8999999999999999,
                            IsActive = true,
                            PhoneNumber = "1112223344",
                            Weight = 82.5
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 2000.50m,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(8),
                            IsActive = true,
                            PatientId = 2,
                            PaymentDate = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 2,
                            Amount = 4000m,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(44),
                            IsActive = true,
                            PatientId = 2,
                            PaymentDate = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 3,
                            Amount = 6000.70m,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(49),
                            IsActive = true,
                            PatientId = 1,
                            PaymentDate = new DateTime(2024, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 4,
                            Amount = 8500.50m,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 765, DateTimeKind.Local).AddTicks(52),
                            IsActive = true,
                            PatientId = 3,
                            PaymentDate = new DateTime(2024, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Room", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BuildingNumber = 11,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 771, DateTimeKind.Local).AddTicks(1683),
                            FloorNumber = 2,
                            IsActive = true,
                            RoomNumber = 101
                        },
                        new
                        {
                            ID = 2,
                            BuildingNumber = 21,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 771, DateTimeKind.Local).AddTicks(1712),
                            FloorNumber = 3,
                            IsActive = true,
                            RoomNumber = 203
                        },
                        new
                        {
                            ID = 4,
                            BuildingNumber = 31,
                            CreatedDate = new DateTime(2024, 4, 15, 15, 22, 6, 771, DateTimeKind.Local).AddTicks(1716),
                            FloorNumber = 1,
                            IsActive = true,
                            RoomNumber = 207
                        });
                });

            modelBuilder.Entity("DataAccess.Models.Entities.AnalysisResult", b =>
                {
                    b.HasOne("DataAccess.Models.Entities.Patient", "Patient")
                        .WithMany("AnalysisResults")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Appointment", b =>
                {
                    b.HasOne("DataAccess.Models.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Models.Entities.PatientInfo", b =>
                {
                    b.HasOne("DataAccess.Models.Entities.Patient", "Patient")
                        .WithOne("PatientInfo")
                        .HasForeignKey("DataAccess.Models.Entities.PatientInfo", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Payment", b =>
                {
                    b.HasOne("DataAccess.Models.Entities.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Room", b =>
                {
                    b.HasOne("DataAccess.Models.Entities.Doctor", "Doctor")
                        .WithOne("Room")
                        .HasForeignKey("DataAccess.Models.Entities.Room", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Entities.Patient", b =>
                {
                    b.Navigation("AnalysisResults");

                    b.Navigation("Appointments");

                    b.Navigation("PatientInfo")
                        .IsRequired();

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
